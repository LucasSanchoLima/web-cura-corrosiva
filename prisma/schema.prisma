// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Newsletter {
  id    Int     @id @default(autoincrement())
  email String  @unique
  ativo Boolean @default(true)

  @@map("newsletter")
}

model Paragrafos {
  id         String   @id @default(uuid())
  texto      String
  capituloId String
  index      Int      @default(-1)
  Capitulo   Capitulo @relation(fields: [capituloId], references: [id])
}

model Capitulo {
  id               String       @id @default(uuid())
  titulo           String
  texto            String?
  comentarioStatus StatusLivro  @default(PRIVADO)
  status           StatusLivro  @default(PRIVADO)
  livroId          String
  livro            Livro        @relation(fields: [livroId], references: [id])
  Paragrafos       Paragrafos[]
}

model Livro {
  id                String      @id @default(uuid())
  status            StatusLivro @default(PRIVADO)
  urlCapa           String?
  titulo            String
  descricao         String?
  criadorPrincialId String
  criadorPrincial   Usuario     @relation(name: "criadorPrincipal", fields: [criadorPrincialId], references: [id])
  Capitulo          Capitulo[]
}

model Usuario {
  id                   String             @id @default(uuid())
  email                String             @unique
  emailPagamento       String             @unique //Ver se é neceesário com o Stripe
  nome                 String?            @unique
  verificado           Boolean            @default(false)
  status               StatusUsuario      @default(PADRAO)
  ultimaParteId        Int?
  config               Json
  criadoEm             DateTime           @default(now())
  atuallizadoEm        DateTime           @updatedAt
  excluido             Boolean            @default(false)
  Pagamentos           Pagamentos[]
  Comentario           Comentario[]
  PontosComentario     PontosComentario[]
  CrimesCometidos      Denuncia[]         @relation(name: "criminoso")
  CrimesDenunciados    Denuncia[]         @relation(name: "acusador")
  LivroCriadorPrincial Livro[]            @relation(name: "criadorPrincipal")

  @@map("usuario")
}

model Pagamentos {
  id        Int     @id @default(autoincrement())
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  tier      Int
  valor     Decimal @db.Money

  @@map("pagamentos")
}

model Banidos {
  id         Int           @id @default(autoincrement())
  email      String        @unique
  comentario String
  tipo       TipoBanimento

  @@map("banidos")
}

// model ComentarioPaiFilho {
//   id         Int        @id @default(autoincrement())
//   pai        String
//   filho      String
//   comentario Comentario @relation(fields: [pai, filho], references: [id])
// }

model Comentario {
  id              String           @id @default(uuid())
  texto           String
  status          StatusComentario @default(ORIGINAL)
  pontos          Int              @default(0)
  usuarioId       String
  usuario         Usuario          @relation(fields: [usuarioId], references: [id])
  parteLivroIdURL Int
  filhos          Comentario[]     @relation("Comentario")
  pai             Comentario?      @relation("Comentario", fields: [paiId], references: [id])
  paiId           String?

  // parteLivro    ParteLivro       @relation(fields: [parteLivroId], references: [id])
  dataCriado       DateTime           @default(now())
  atuallizadoEm    DateTime           @updatedAt
  PontosComentario PontosComentario[]
  // ComentarioPaiFilho ComentarioPaiFilho[]
  Denuncia         Denuncia[]

  @@map("comentario")
}

model PontosComentario {
  id           Int        @id @default(autoincrement())
  comentarioId String
  ponto        Int        @default(0) @db.SmallInt
  usuarioId    String
  usuario      Usuario    @relation(fields: [usuarioId], references: [id])
  Comentario   Comentario @relation(fields: [comentarioId], references: [id])

  @@map("pontoscomentario")
}

model Denuncia {
  id                     Int           @id @default(autoincrement())
  tipoDenuncia           TipoBanimento @default(PADRAO)
  textoDuplicado         String
  nomeCriminosoDuplicado String
  observacao             String        @default("")
  ComentarioId           String
  comentario             Comentario    @relation(fields: [ComentarioId], references: [id])
  criminosoId            String
  criminoso              Usuario       @relation(name: "criminoso", fields: [criminosoId], references: [id])
  acusadorId             String
  acusador               Usuario       @relation(name: "acusador", fields: [acusadorId], references: [id])
}

enum TipoBanimento {
  PADRAO
  ODIO
  SPOILER
  OUTRO

  @@map("tipobanimento")
}

enum StatusUsuario {
  PADRAO
  BANIDO
  SHADOWBAN

  @@map("statususuario")
}

enum StatusComentario {
  EDITADO
  EXCLUIDO
  ORIGINAL

  @@map("statuscomentado")
}

enum StatusLivro {
  PUBLICO
  PRIVADO
  INVISIVEL
}
