// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model LITradutorSaida {
//   id         Int          @id @default(autoincrement())
//   nome       String
//   lITradutor LITradutor[]
// }

// model LITradutor {
//   entrada String          @unique
//   saidaId Int
//   saida   LITradutorSaida @relation(fields: [saidaId], references: [id])
// }

// model LIMensagem {
//   id       Int      @id @default(autoincrement())
//   mensagem String
//   data     DateTime @default(now())
// }

model Newsletter {
  id    Int    @id @default(autoincrement())
  email String @unique
}

model Usuario {
  id                 String               @id @default(cuid())
  email              String               @unique
  emailPagamento     String               @unique
  verificado         Boolean              @default(false)
  tier               Int                  @default(0) @db.SmallInt
  enviarMensagem     Boolean              @default(false)
  config             Json
  mensagens          Mensagem[]
  criadoEm           DateTime             @default(now())
  atuallizadoEm      DateTime             @updatedAt
  acesso             Acesso[]
  Pagamentos         Pagamentos[]
  livro              Livro[]
  Historico          HistoricoLivro[]
  HistoricoAtividade HistoricoAtividade[]
}

model HistoricoAtividade {
  id          Int          @id @default(autoincrement())
  log         String
  usuarioId   String
  usuario     Usuario      @relation(fields: [usuarioId], references: [id])
  ip          String       @db.Inet
  dispositivo Dispositivos
  data        DateTime     @default(now())
}

model HistoricoLivro {
  id            Int        @id @default(autoincrement())
  terminado     Boolean    @default(false)
  ultimoCapLido Int
  capitulo      LivroParte @relation(fields: [ultimoCapLido], references: [id])
  livroId       Int
  livro         Livro      @relation(fields: [livroId], references: [id])
  usuarioId     String
  usuario       Usuario    @relation(fields: [usuarioId], references: [id])
  atuallizadoEm DateTime   @updatedAt
}

model Pagamentos {
  id        Int     @id @default(autoincrement())
  usuarioId String
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
  tier      Int
  valor     Decimal @db.Money
}

model Acesso {
  id          Int          @id @default(autoincrement())
  usuarioId   String
  usuario     Usuario      @relation(fields: [usuarioId], references: [id])
  ip          String       @db.Inet
  dispositivo Dispositivos
  data        DateTime     @default(now())
}

model Mensagem {
  id        Int      @id @default(autoincrement())
  usuarioId String
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
  direcao   Boolean
  conteudo  String
  data      DateTime @default(now())
}

model Banidos {
  id    Int    @id @default(autoincrement())
  email String @unique
}

model LivroParagrafo {
  id         Int        @id @default(autoincrement())
  texto      String
  parteId    Int
  livroParte LivroParte @relation(fields: [parteId], references: [id])
  config     Json
}

model LivroParte {
  id             Int              @id @default(autoincrement())
  nome           String
  livroId        Int
  livro          Livro            @relation(fields: [livroId], references: [id])
  config         Json
  LivroParagrafo LivroParagrafo[]
  Historico      HistoricoLivro[]
}

model Livro {
  id             Int              @id @default(autoincrement())
  nome           String
  usuarioId      String
  usuario        Usuario          @relation(fields: [usuarioId], references: [id])
  publico        Boolean          @default(false)
  dataCriado     DateTime         @default(now())
  dataAtualizado DateTime         @updatedAt
  LivroParte     LivroParte[]
  Historico      HistoricoLivro[]
}

enum Dispositivos {
  DESKTOP
  CELULAR
  TABLET
  OUTROS
}

enum StatusLeitor {
  LENDO
  QUERENDO
  FINALIZADO
}
